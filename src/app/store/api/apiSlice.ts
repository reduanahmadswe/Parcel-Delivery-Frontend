import { TokenManager } from '../../../shared/services/TokenManager';
import { BaseQueryFn, createApi, FetchArgs, fetchBaseQuery, FetchBaseQueryError } from '@reduxjs/toolkit/query/react';
import { logout, refreshTokenSuccess, setLoading } from '../slices/authSlice';

import { API_BASE } from '../../../shared/constants/config';

const API_BASE_URL = API_BASE;

// Base query with authentication
const baseQuery = fetchBaseQuery({
    baseUrl: API_BASE_URL,
    // credentials removed - we use Bearer tokens stored in localStorage
    prepareHeaders: (headers) => {
        // Always get token from TokenManager (which checks localStorage/cookie)
        const token = TokenManager.getAccessToken();
        console.log("üîç prepareHeaders - Token:", token ? `${token.substring(0, 20)}...` : "‚ùå NO TOKEN");
        
        if (token) {
            headers.set('authorization', `Bearer ${token}`);
            console.log("‚úÖ Authorization header set");
        } else {
            console.warn("‚ö†Ô∏è No token available for request");
        }
        headers.set('Content-Type', 'application/json');
        return headers;
    },
});

// Base query with re-authentication
const baseQueryWithReauth: BaseQueryFn<
    string | FetchArgs,
    unknown,
    FetchBaseQueryError
> = async (args, api, extraOptions) => {
    // Set loading when making requests
    api.dispatch(setLoading(true));

    let result = await baseQuery(args, api, extraOptions);

    // Handle 401 unauthorized - try to refresh token
    if (result.error && result.error.status === 401) {
        console.log('Sending refresh token');

        // Try to refresh the token
        const refreshResult = await baseQuery(
            {
                url: '/auth/refresh-token',
                method: 'POST',
                body: {
                    refreshToken: TokenManager.getRefreshToken(),
                },
            },
            api,
            extraOptions
        );

        if (refreshResult.data) {
            const refreshData = refreshResult.data as { accessToken: string };

            // Update token in Redux and storage
            api.dispatch(refreshTokenSuccess(refreshData.accessToken));

            // Retry original request with new token
            result = await baseQuery(args, api, extraOptions);
        } else {
            // Refresh failed, logout user
            console.log('Refresh token failed, logging out');
            api.dispatch(logout());

            // Redirect to login if in browser
            if (typeof window !== 'undefined') {
                window.location.href = '/login';
            }
        }
    }

    // Clear loading state
    api.dispatch(setLoading(false));

    return result;
};

// Create API slice
export const apiSlice = createApi({
    reducerPath: 'api',
    baseQuery: baseQueryWithReauth,
    tagTypes: ['Auth', 'User', 'Parcel', 'Admin'],
    endpoints: () => ({}),
});

// Export hooks (will be generated by RTK Query)
export default apiSlice;

